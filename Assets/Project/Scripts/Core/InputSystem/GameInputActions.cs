//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Project/Scripts/Core/InputSystem/GameInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Core.InputSystem
{
    public partial class @GameInputActions: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @GameInputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""ec81ef9c-c204-493f-990e-85b9df2df2c2"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""bd1d81d5-2538-433e-b628-447173f85549"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""StraightShoot"",
                    ""type"": ""Button"",
                    ""id"": ""0edae760-7323-4d85-b452-11240fa9f02e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftAngleShoot"",
                    ""type"": ""Button"",
                    ""id"": ""dfdec64d-d841-4475-ac01-a25ba10df6b1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightAngleShoot"",
                    ""type"": ""Button"",
                    ""id"": ""de548860-8fde-4767-a952-b1b2329fbe5a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleAngle"",
                    ""type"": ""Button"",
                    ""id"": ""34967c62-2017-4d08-b38a-43e50ef30add"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleBulletLevel"",
                    ""type"": ""Button"",
                    ""id"": ""c0bdbc3b-874d-492d-9803-5ce3878e1b4d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FireLevel3Bullet"",
                    ""type"": ""Button"",
                    ""id"": ""2d4668ac-7e06-4e23-bddb-f200b2f54210"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dbd8dd91-3fb1-4fe5-9aeb-540dcc606dea"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""8b8d8f0c-bcf8-4a8d-8b8b-4368d4dc3c50"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""823d2e2a-fe5c-4865-9efd-82efa1926f85"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""efe04864-e2b0-4c14-8b83-862c96b040d4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""85eaaa93-4c14-4154-9d17-8c5e681f3a4e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f5c71266-1cfc-40e3-8bdf-a512a8fa8614"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4cd63ac3-75f2-48ec-984e-eb7a7f5e345a"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StraightShoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""10c9445d-8d38-41c7-a100-f86ed13d7ac9"",
                    ""path"": ""<Keyboard>/n"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftAngleShoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a51d41c9-291f-4c22-ac3d-c83c9792f3e7"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightAngleShoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c41052e-fce8-4f26-8d49-ebc3ebb1ec32"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleAngle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c0c37eac-c731-45de-a795-a8c986074c0b"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleBulletLevel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ad203a10-11b5-442c-bb6b-ecee533e3719"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FireLevel3Bullet"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""id"": ""cb126cd7-c584-4be8-94f7-bdf171d164a0"",
            ""actions"": [
                {
                    ""name"": ""PrimaryFingerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""4f0b29db-2acb-4aed-99eb-9a67a1c286da"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondaryFingerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""e5e0ebb0-6362-4da7-91ad-dcf406b9f27c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7a3a89a0-9db9-49a4-9186-1058a938616c"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryFingerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""45822f1b-5018-46b3-a50f-e0569dde4277"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryFingerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Player
            m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
            m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
            m_Player_StraightShoot = m_Player.FindAction("StraightShoot", throwIfNotFound: true);
            m_Player_LeftAngleShoot = m_Player.FindAction("LeftAngleShoot", throwIfNotFound: true);
            m_Player_RightAngleShoot = m_Player.FindAction("RightAngleShoot", throwIfNotFound: true);
            m_Player_ToggleAngle = m_Player.FindAction("ToggleAngle", throwIfNotFound: true);
            m_Player_ToggleBulletLevel = m_Player.FindAction("ToggleBulletLevel", throwIfNotFound: true);
            m_Player_FireLevel3Bullet = m_Player.FindAction("FireLevel3Bullet", throwIfNotFound: true);
            // Touch
            m_Touch = asset.FindActionMap("Touch", throwIfNotFound: true);
            m_Touch_PrimaryFingerPosition = m_Touch.FindAction("PrimaryFingerPosition", throwIfNotFound: true);
            m_Touch_SecondaryFingerPosition = m_Touch.FindAction("SecondaryFingerPosition", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Player
        private readonly InputActionMap m_Player;
        private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
        private readonly InputAction m_Player_Move;
        private readonly InputAction m_Player_StraightShoot;
        private readonly InputAction m_Player_LeftAngleShoot;
        private readonly InputAction m_Player_RightAngleShoot;
        private readonly InputAction m_Player_ToggleAngle;
        private readonly InputAction m_Player_ToggleBulletLevel;
        private readonly InputAction m_Player_FireLevel3Bullet;
        public struct PlayerActions
        {
            private @GameInputActions m_Wrapper;
            public PlayerActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Player_Move;
            public InputAction @StraightShoot => m_Wrapper.m_Player_StraightShoot;
            public InputAction @LeftAngleShoot => m_Wrapper.m_Player_LeftAngleShoot;
            public InputAction @RightAngleShoot => m_Wrapper.m_Player_RightAngleShoot;
            public InputAction @ToggleAngle => m_Wrapper.m_Player_ToggleAngle;
            public InputAction @ToggleBulletLevel => m_Wrapper.m_Player_ToggleBulletLevel;
            public InputAction @FireLevel3Bullet => m_Wrapper.m_Player_FireLevel3Bullet;
            public InputActionMap Get() { return m_Wrapper.m_Player; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @StraightShoot.started += instance.OnStraightShoot;
                @StraightShoot.performed += instance.OnStraightShoot;
                @StraightShoot.canceled += instance.OnStraightShoot;
                @LeftAngleShoot.started += instance.OnLeftAngleShoot;
                @LeftAngleShoot.performed += instance.OnLeftAngleShoot;
                @LeftAngleShoot.canceled += instance.OnLeftAngleShoot;
                @RightAngleShoot.started += instance.OnRightAngleShoot;
                @RightAngleShoot.performed += instance.OnRightAngleShoot;
                @RightAngleShoot.canceled += instance.OnRightAngleShoot;
                @ToggleAngle.started += instance.OnToggleAngle;
                @ToggleAngle.performed += instance.OnToggleAngle;
                @ToggleAngle.canceled += instance.OnToggleAngle;
                @ToggleBulletLevel.started += instance.OnToggleBulletLevel;
                @ToggleBulletLevel.performed += instance.OnToggleBulletLevel;
                @ToggleBulletLevel.canceled += instance.OnToggleBulletLevel;
                @FireLevel3Bullet.started += instance.OnFireLevel3Bullet;
                @FireLevel3Bullet.performed += instance.OnFireLevel3Bullet;
                @FireLevel3Bullet.canceled += instance.OnFireLevel3Bullet;
            }

            private void UnregisterCallbacks(IPlayerActions instance)
            {
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @StraightShoot.started -= instance.OnStraightShoot;
                @StraightShoot.performed -= instance.OnStraightShoot;
                @StraightShoot.canceled -= instance.OnStraightShoot;
                @LeftAngleShoot.started -= instance.OnLeftAngleShoot;
                @LeftAngleShoot.performed -= instance.OnLeftAngleShoot;
                @LeftAngleShoot.canceled -= instance.OnLeftAngleShoot;
                @RightAngleShoot.started -= instance.OnRightAngleShoot;
                @RightAngleShoot.performed -= instance.OnRightAngleShoot;
                @RightAngleShoot.canceled -= instance.OnRightAngleShoot;
                @ToggleAngle.started -= instance.OnToggleAngle;
                @ToggleAngle.performed -= instance.OnToggleAngle;
                @ToggleAngle.canceled -= instance.OnToggleAngle;
                @ToggleBulletLevel.started -= instance.OnToggleBulletLevel;
                @ToggleBulletLevel.performed -= instance.OnToggleBulletLevel;
                @ToggleBulletLevel.canceled -= instance.OnToggleBulletLevel;
                @FireLevel3Bullet.started -= instance.OnFireLevel3Bullet;
                @FireLevel3Bullet.performed -= instance.OnFireLevel3Bullet;
                @FireLevel3Bullet.canceled -= instance.OnFireLevel3Bullet;
            }

            public void RemoveCallbacks(IPlayerActions instance)
            {
                if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerActions @Player => new PlayerActions(this);

        // Touch
        private readonly InputActionMap m_Touch;
        private List<ITouchActions> m_TouchActionsCallbackInterfaces = new List<ITouchActions>();
        private readonly InputAction m_Touch_PrimaryFingerPosition;
        private readonly InputAction m_Touch_SecondaryFingerPosition;
        public struct TouchActions
        {
            private @GameInputActions m_Wrapper;
            public TouchActions(@GameInputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @PrimaryFingerPosition => m_Wrapper.m_Touch_PrimaryFingerPosition;
            public InputAction @SecondaryFingerPosition => m_Wrapper.m_Touch_SecondaryFingerPosition;
            public InputActionMap Get() { return m_Wrapper.m_Touch; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(TouchActions set) { return set.Get(); }
            public void AddCallbacks(ITouchActions instance)
            {
                if (instance == null || m_Wrapper.m_TouchActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_TouchActionsCallbackInterfaces.Add(instance);
                @PrimaryFingerPosition.started += instance.OnPrimaryFingerPosition;
                @PrimaryFingerPosition.performed += instance.OnPrimaryFingerPosition;
                @PrimaryFingerPosition.canceled += instance.OnPrimaryFingerPosition;
                @SecondaryFingerPosition.started += instance.OnSecondaryFingerPosition;
                @SecondaryFingerPosition.performed += instance.OnSecondaryFingerPosition;
                @SecondaryFingerPosition.canceled += instance.OnSecondaryFingerPosition;
            }

            private void UnregisterCallbacks(ITouchActions instance)
            {
                @PrimaryFingerPosition.started -= instance.OnPrimaryFingerPosition;
                @PrimaryFingerPosition.performed -= instance.OnPrimaryFingerPosition;
                @PrimaryFingerPosition.canceled -= instance.OnPrimaryFingerPosition;
                @SecondaryFingerPosition.started -= instance.OnSecondaryFingerPosition;
                @SecondaryFingerPosition.performed -= instance.OnSecondaryFingerPosition;
                @SecondaryFingerPosition.canceled -= instance.OnSecondaryFingerPosition;
            }

            public void RemoveCallbacks(ITouchActions instance)
            {
                if (m_Wrapper.m_TouchActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ITouchActions instance)
            {
                foreach (var item in m_Wrapper.m_TouchActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_TouchActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public TouchActions @Touch => new TouchActions(this);
        public interface IPlayerActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnStraightShoot(InputAction.CallbackContext context);
            void OnLeftAngleShoot(InputAction.CallbackContext context);
            void OnRightAngleShoot(InputAction.CallbackContext context);
            void OnToggleAngle(InputAction.CallbackContext context);
            void OnToggleBulletLevel(InputAction.CallbackContext context);
            void OnFireLevel3Bullet(InputAction.CallbackContext context);
        }
        public interface ITouchActions
        {
            void OnPrimaryFingerPosition(InputAction.CallbackContext context);
            void OnSecondaryFingerPosition(InputAction.CallbackContext context);
        }
    }
}
